#!/bin/python3

import math
import os
import random
import re
import sys

# Node class for creating linked list nodes
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Stack class for implementing a stack using linked list
class Stack:
    def __init__(self, lst=[]):
        self.head = None
        self.length = 0
        if len(lst) > 0:
            for i in range(len(lst)):
                self.push(lst[i])

    # Push a new element onto the stack
    def push(self, data):
        node = Node(data)
        if self.head is None:
            self.head = node
        else:
            node.next = self.head
            self.head = node

        self.length += 1

    # Pop the top element from the stack and return its value
    def pop(self):
        val = self.head.data
        if self.head.next is not None:
            self.head = self.head.next
        else:
            self.head = None

        self.length -= 1
        return int(val)

    # Return the current length of the stack
    def __len__(self):
        return self.length

# Sieve of Eratosthenes algorithm to generate prime numbers
def sieve(number):
    sieve = [2]
    prime_candidate = 3

    while len(sieve) < number:
        is_prime = True
        sieve_index = 0
        while sieve_index < len(sieve):
            if prime_candidate % sieve[sieve_index] == 0:
                is_prime = False
                break
            sieve_index += 1
        if is_prime:
            sieve.append(prime_candidate)
        prime_candidate += 2

    return sieve

# Main function for processing the waiter problem
def waiter(number, q):
    answers, stackA, list_loop, stackB = [], Stack(number), [], Stack()
    orig_number = q
    primes = sieve(q)

    # Loop through the original number of queries
    while orig_number > 0:
        # Iterate through elements in stackA
        for i in range(len(stackA)):
            val = stackA.pop()
            # Check if the element is divisible by the current prime number
            if val % primes[q - orig_number] == 0:
                stackB.push(val)  # If divisible, push to stackB
            else:
                list_loop.append(val)  # If not divisible, add to list_loop
        # Transfer elements from stackB to answers
        for i in range(len(stackB)):
            answers.append(stackB.pop())
        stackA = Stack(list_loop)  # Update stackA with the remaining elements
        list_loop.clear()
        orig_number -= 1

    # Transfer any remaining elements in stackA to answers
    for i in range(len(stackA)):
        answers.append(stackA.pop())

    return answers

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    # Input processing
    first_multiple_input = input().rstrip().split()
    n = int(first_multiple_input[0])
    q = int(first_multiple_input[1])
    number = list(map(int, input().rstrip().split()))

    # Call the waiter function and write the result to the output file
    result = waiter(number, q)
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
